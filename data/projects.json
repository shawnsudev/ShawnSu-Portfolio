{
  "personalProjects": [
    {
      "name": "Portfolio Website",
      "img": "https://mir-s3-cdn-cf.behance.net/project_modules/disp/945b0225337909.563440870421b.png",
      "tools": [
        "next",
        "chakra-ui",
        "framer-motion",
        "node",
        "vercel",
        "github",
        "typescript"
      ],
      "focus": "Frontend Development",
      "description": "My personal portfolio website (i.e. this site) that lists previous projects I have done and demostrates my coding skills.",
      "link": "https://shawnsu-portfolio.vercel.app/",
      "source": "https://github.com/shawnsudev/shawnsu-portfolio",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<li><strong>Frontend</strong>: developed on Next, deployed to Vercel.</li>                                            <li><strong>Backend</strong>: serverless function developed on Next.</li>                                             <li><strong>Main features</strong>: self-introduction,  projects I've done, my skills and toolset, contact me page.</li>"
          ]
        }
      ],
      "highlights": [
        {
          "title": "Serverless Function",
          "content": [
            "One of the benefits of using Next.js is the abiltiy to use Serverless Function to perform serverside tasks <strong>without having to build & manage a server yourself</strong>, which saves a lot of overhead and time - no need to install Express, configure the server and deploy it.",
            "It feels refreshing, like using <em>Create-React-App</em> instead of manually building a React project from the ground up.",
            "I'm sure there are situations that you would still want to build & manage your own server, but Serverless Function can probably replace the traditional way in many cases."
          ]
        },
        {
          "title": "Orchestration",
          "content": [
            "Previous projects all focused more on learning certain technologies and overcoming certain technical barriers. This is the first project that I truly learned orchestration - how to <strong>get all the moving parts work seamlessly together</strong>, and how to adjust and change them in a much more <em>declarative and abstract</em> way.",
            "With bigger projects, you have to think on a higher level, and using more ready-made tools to help you achieve that <strong>'Big Picture'</strong> view, otherwise you get bogged down by too many technical details. Coincidentally, this is also the core thinking of <em>Functional Programming</em> over <em>Imperative Programming</em>.",
            "One example is adopting <em>Next.js framework</em>. Previously I applied what I learned from school - manually building and configuring the techstack. I would install React, Express and other packages one by one, then manually write docker compose configuration file. It is a flexible and highly customisable process but tedious. Using Next.js saves lots of overhead in time as the framework makes many choices for you so you have more brain processing power for the Big Picture."
          ]
        },
        {
          "title": "Themeable UI Framework",
          "content": [
            "Previously I mainly relied on plain CSS to do UI work as I wanted to challenge myself to learn more about low-level CSS. You have a lot of low-level control this way, however, admittedly, it quickly became tediously, time-consuming and error-prone once the project grew bigger than a simple webpage with a few components. ",
            "Using a UI Framework is like switching from <em>building a house on your own with handtools</em> to overseeing a group of builders with powertools. Being freed from having to wrangle unruly low-level CSS properties allows you the freedom to <strong>compose code</strong>."
          ]
        },
        {
          "title": "Animation & Transition",
          "content": [
            "Learning how to do page transition/animation using Framer was pretty fun for me. Having previously learned how to do some basic animations with vanilla CSS, I know well how difficult and cumbersome it can be when animation becomes too complex. Using a framework like Framer give you higher level control.",
            "I used Framer for all the FadeIn effects which could be a lot more difficult to orchestrate without the help of a framework.",
            "I also used plain CSS for page title rubberbanding animation. Plain CSS gives you granualar control - different tools for different situations."
          ]
        },
        {
          "title": "Composition",
          "content": [
            "Building a project like this really helped deepened the concept of <strong>composition and how to create and reuse components</strong>.",
            "Initially I write a lot of code in one component to the point it becomes hundreds of line and too unwieldy, the structure of the code becomes blurry, you have to go through layers of tags to see what's inside. It becomes clear that the best way to handle this kind of situation is to create lower level components for storing repeating logic/code, then use higher level components to compose the app."
          ]
        }
      ]
    },
    {
      "name": "Game of Life",
      "img": "https://play-lh.googleusercontent.com/Ia1Pt7lUxyCpjMYBhurg3hl-s7dx8Mf-uv-vbwRHPjXmnhYTIvtMyDzMfgOZLIE4f1w",
      "tools": [
        "mongodb",
        "express",
        "react",
        "node",
        "github",
        "netlify",
        "render",
        "insomnia"
      ],
      "focus": "Frontend Development",
      "description": "My implementation of Conway's Game of Life.User can play/pause/step forward game, change speed or seed number with a slider, change colour themes & screen size, draw custom shapes, or play demos.",
      "link": "https://game-of-life-by-shawn-su.netlify.app/",
      "source": "https://github.com/WWSDI/game-of-life",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li>                                            <li><strong>Backend</strong>: NA                                             <li><strong>Main features</strong>: speed & seed sliders, colour themes, play/pause/step game, draw custom shapes, play demos, change screen size.</li>"
          ]
        },
        {
          "title": "Development Path",
          "content": [
            "This project started as a simple implementation of John Conway's Game of Life invented in 1970. It was relatively simple to implement the basic features in React, such as randomly seed the board and run the game.",
            "Then I got more ambitious and wanted to add more features into the game such as using the board as a drawing pad so users can experiment with various custom shapes. Then with the drawing feature at hand, I got inspired to create a demo feature which allows users to play ready-made shapes in realtime.",
            "The good thing about doing this project is that I challenged myself to build features I didn't learn in class how to do, so I had to <strong>resort to creative thinking and research</strong> to help with implementation solution. The downside is lots of time wasted due to lack of structured planning."
          ]
        }
      ],
      "highlights": [
        {
          "title": "Organising Project Files",
          "content": [
            "As this project grew bigger as I added more features, every <em>.tsx Component file</em> got pretty lengthy, and I realised it was not sustainable to keep all logic in one file. It became clear that some less relevant/important logic has to be extracted into other files and hidden away from sight. Otherwise readability suffers.",
            "I guess that's why developers use so many different folders such as <em>utils, lib, styles, type</em> etc. to store different code snippets so their main logic files are concise and readable.",
            "Honestly, I haven't done such a great job at organising files in this project, but I did get a taste of the wonderful feeling when you clean up a file crammed with hundreds of lines of code and turn it into a readable, elegantly presented 30-line code file."
          ]
        },
        {
          "title": "Development VS Production Build",
          "content": [
            "A strange problem I came across during development was performance issue - <strong>the game runs very slowly locally</strong> compared to other people's implementions I've seen online.",
            "I thought I had done something wrong, it could be incorrect use of React useEffect hooks resulted in redundant rendering. So I fiddled with it a lot to no avail. Eventually I gave up and deployed the 'slow' version, and to my surprise, it ran blazing fast. It dawned on me then it was because I had always ran development build locally which must have had some <em>performance loss</em> due to non-optimised code.",
            "I gained two new insights from this mistake - one is there's differences between development and production build, if you want to see the end result, you need to deploy it; the other is <strong>it pays to adopt Agile Development</strong>. Errors (or non-errors in this case) can be quickly discovered through <em>continuous development & deployment</em> and quickly addressed in the next iteration."
          ]
        }
      ]
    },
    {
      "name": "Sudoku",
      "img": "https://cdn-icons-png.flaticon.com/512/5731/5731711.png",
      "tools": [
        "mongodb",
        "express",
        "react",
        "node",
        "github",
        "typescript",
        "netlify",
        "render",
        "insomnia"
      ],
      "focus": "Fullstack Development",
      "description": "My implementation of the classic Sudoku (logic-based, combinatorial number puzzle) game. Users can choose from various difficulty levels to start a new game. Users can close the webpage and come back later and resume playing.",
      "link": "https://sudoku-shawnsu.netlify.app/",
      "source": "https://github.com/WWSDI/sudoku-SPA",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li>                                            <li><strong>Backend</strong>: developed on Express; deployed on Render.com; database is hosted on MongoDB Atlas.                                      <li><strong>Main features</strong>: start new game & difficulty selection; same-number highlighting (in gray); duplicate highlighting (in red); resume game progress; win-game animation.</li>"
          ]
        },
        {
          "title": "Development Path",
          "content": [
            "The idea of developing a Sudoku game formed when I was doing a sudoku solution validation coding challenge on Codewars.com. The task was sufficiently challenging I thought it could be fun to expand on the sudoku solver and make a full game as a personal project. Turned out that solution validation was about the easiest part of the project.",
            "Firstly, I wrote solution generator in plain JS, then used it to generate 10,000 solutions. Then I wrote a puzzle generator that turns a solution into a puzzle based on difficulty level - a puzzle is simply a solution of which a certain number of cells are omitted randomly.",
            "The second phase was to build a project with frontend, backend and a database - I borrowed the structure from previous school projects. Backend was very lean - only one route, which returns a puzzle when a GET request hits, was needed. Database holds the 10,000 solutions which are simply one dimentional arrays. Frontend is the main focus as it hold most of the business logic.",
            "I started building Frontend in React, after a few weeks, through tons of trial and error, eventually got the game to work. This project was originally deployed in 2021."
          ]
        }
      ],
      "highlights": [
        {
          "title": "Declarative VS Imperative",
          "content": [
            "I got stuck for many days over the duplicate highlighting feature - if a user filled in a number that is already used in the row/column/block, then the number cells in the active region is highlighted as red.",
            "Sounds simple in theory, but when I implemented, it felt very overwhelming because there's so many different conditions to check, and I had to use many 'if' conditional clauses so that the duplicate cells will be 'manually' highlighted. To make things worse, the previously highlighted cells have to be 'manually' turned off if the user changed the input number. <strong>Things started to break down from here as there were too many conditions to keep track.</strong>",
            "After left it off for a few days, it finally dawned on me, instead of checking the duplicates in the active region and tracking their change of states, I should simply do a 'stateless' check, not unlike the concept of <em>RESTful API</em>, to the whole board. Regardless of the cell's previous state (highlighted or not), I just check every cell, if it fits the criteria, it is highlighted, if not, then dimmed.",
            "This was a thinking process revolution for me - switching from <strong>imperative to declarative</strong> or <strong>procedural to functional</strong> thinking. Functional programming actually leaves more work for the computer to do, so your program might run slower, but you as the human developer is saved from being bogged down by hundreds of chores, hence much faster development and easy to read logic."
          ]
        },
        {
          "title": "useEffect Hook",
          "content": [
            "useEffect hook is a fundamental React Hook to learn yet it can be tricky. My understanding of its use was not up to scratch at first, coupled with the amount of side effects the app needs to perform, I had a lot of trouble getting it to work properly.",
            "Eventually I realised that you can't just lump all the side effects into one useEffect hook, because different side effect may have <em>different dependencies</em>. Lumping them together may mean <strong>some side effects overrun while others underrun</strong>.",
            "So I used <strong>multiple useEffect hooks</strong> in <Board/> to perform all necessary side effects with difference dependency arrays. This way, not only did the side effects perform correctly, different business logic were also kept separate as to increase readablity."
          ]
        },
        {
          "title": "Typescript",
          "content": [
            "JS is a dynamically typed language which makes it easy to learn, but its limitation starts to show when projects get bigger. A common mistake I make during development is <strong>making wrong assumptions of the shape of some data</strong> and thus end up using the wrong functions to handle it.",
            "Typescript brings order and certainty into the world of JS. The language forces you to be mindful of the shape of inputs and outputs, this is particularly helpful when you have to program both frontend and backend where data structure may differ.",
            "I used Typescript throughout the whole Sudoku project in defining all kinds of data shapes like the puzzles, puzzle sets etc. Admittedly, my utilisation was minimal, but I already saw the benefits of much less runtime error.",
            "But using Typescript has its challenges. Your code gets longer and more difficult to read. React Elements have their own types which if you get wrong, you get many annoying red squiggly lines indicating errors."
          ]
        }
      ]
    }
  ],
  "schoolProjects": [
    {
      "name": "Reservationizr",
      "img": "https://icon-library.com/images/reservation-icon-png/reservation-icon-png-29.jpg",
      "tools": [
        "mongodb",
        "express",
        "react",
        "node",
        "docker",
        "reactrouter",
        "jest",
        "github",
        "netlify",
        "heroku",
        "render",
        "insomnia",
        "notion",
        "miro",
        "slack",
        "google-meet"
      ],
      "focus": "Backend Development",
      "description": "Final school project in the Backend development term. This project aims to build & deploy a simple backend for a ready-made restaurant reservation booking app, and stich up the frontend and backend. Users are able to view restaurant info, sign up/log in, make new or view exsiting reservations.",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<ul><li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li>                          <li><strong>Backend</strong>: API server is hosted on Render.com (originally on Heroku.com); database is hosted on MongoDB Atlas; Auth0 is used for user authentication.</li>                                               <li><strong>Main features</strong>: any users can browse restaurant info; only <em>authenticated users</em> can make new reservations and view previously made reservations.</li></ul>"
          ]
        },
        {
          "title": "User Authentication",
          "content": [
            "Learning how to incorporate User Authentication is a main focus of this project. Auth0 was selected for the role.",
            "Essentially, our job was to <strong>set up certain checkpoints</strong>, e.g. the login button, reservation hyperlink, across the site so when user get to them we can decice the content to show them based on their identity.",
            "On the Backend, <em>Auth0 middleware</em> is used to authenticate the users. On the Frontend, <em>React Router</em> is used to perform the content switching once users' identity is confirmed."
          ]
        },
        {
          "title": "Docker Compose",
          "content": [
            "Docker is mainly used for local development. Specifically, a mongodb database is created using Docker image, saving the trouble of installing/configuring mongodb locally.",
            "Docker Compose yaml file is used to configure docker commands as to avoid manual inputs."
          ]
        }
      ],
      "highlights": [
        {
          "title": "Middleware",
          "content": [
            "Middleware is a very powerful concept. It works just like functions in JS, except for on a larger scale and in this instance HTTP requests-related - you get a certain input, you manipulate it a little with every layer of middleware until you get the exactly output you want. Essentially the whole Express framework is a stack of middleware.",
            "Auth0 middleware's purpose is to check if the JWT from user request matches the one stored on Auth0 account. Our job was to insert Auth0 ready-made code snippets into our frontend and backend app in the right places.",
            "To be honest, the concept was easy to grasp, but the implementation wasn't as there were too many moving parts to keep track. It takes many more practices to get comfortable with it."
          ]
        },
        {
          "title": "REST API",
          "content": [
            "REST API is probably the most fundamental aspect of Backend development. During this project, we learned to write API server that conforms with REST principles which is the standard of web development.",
            "REST API conventions are well defined and relatively easy to follow. E.g. /restaurants route returns data of all restaurants; whereas /restaurants/:id route return data of a specific restaurant.",
            "However, I found REST API too rigid and potentially quite wasteful. Say, if you have a large data set of 10,000 restaurants, should /restaurants route still return all restaurant data even though on the frontend they will never be displayed to the user all at once? Sadly, this is one of the questions unanswered in class. In my own research, I find GraphQL is probably a better solution for large web applications as you can tailor your HTTP requests in ways that the server only returns exactly what the users ask for, even the shape of the data."
          ]
        },
        {
          "title": "Docker",
          "content": [
            "I personally consider Docker Virtual Machine Lite even though there are more nuances. It is a powerful technology that affords total isolation of running environment and requirements of any apps - package them all up as a single container and run them on any host machines.",
            "My experience with docker is mixed. On one hand, I think docker gives web dev incredible certainty and convenience, the result you get locally is guaranteed when deployed. On the other hand, it is complex to understand and use. Writing/configuring docker compose yaml file with multiple services is not at all intuitive, on top of that you have to know different concepts like container, image, volume, layer etc. I guess complexity is a necessary tradeoff for flexibility and control."
          ]
        },
        {
          "title": "Unit Testing",
          "content": [
            "With the help of <em>supertest</em>, we wrote many unit tests while building the backend to ensure every route worked as expected, e.g. an authenticated user should get access to all their reservations but not other users'.",
            "Unit testing does save a lot of time due to automating the manual testing processes. I found it mostly a delight to use when project got bigger and manual testing became a chore and difficult to keep track.",
            "But unit testing also has drawbacks. For one thing, it is very easy to be manipulated if the testing is white box instead of black box, meaning if you write both the server app and the tests, then you know exactly what to/not to test, so it's easy to be lazy/cheeky and omit certain things you should be testing for better results. I think it's a better idea to separate the job of writting the app and the tests so it remain black box testing, for the sake of the integrity of the tests."
          ]
        }
      ],
      "link": "https://reservationizr-app-wwsdi.vercel.app/",
      "source": "https://github.com/WWSDI/02-project---reservationizr-app-part-2---manage-reservations-WWSDI"
    },
    {
      "name": "No.7 Board Game Shop",
      "img": "https://cdn.iconscout.com/icon/premium/png-256-thumb/game-shop-3765597-3140495.png",
      "tools": [
        "react",
        "node",
        "github",
        "stripe",
        "netlify",
        "vscode",
        "slack",
        "google-meet"
      ],

      "focus": "Frontend Development",
      "description": "Final school project in the Frontend Development term. This group project aims to build & deploy a simple e-commerce site (only Frontend) for Board Games with online payment function. Users are able to view store items, filter/sort/search for certain items, purchase items and make payments online.",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<ul><li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li> <li><strong>Backend</strong>: API server is hosted on <em>Begin.com</em>; online payment system and shop items data are hosted on <em>Stripe.com</em>.</li> <li><strong>Main features</strong>: display items; filter, sort, or search items; purchase items and make online payments.</li></ul>"
          ]
        },
        {
          "title": "Managing Project with GitHub",
          "content": [
            "GitHub has great Project management feature. We were able to utilise it and divide the project into 16 small tasks and divvied them all up among the three of us. We also used GitHub's Kanban-style UI to track progress. Pull Requests features is used to help teammates review each other's work and merge individual module/work into the main branch."
          ]
        },
        {
          "title": "Collaborating Remotely",
          "content": [
            "Most of the students attended the course online, so we had to learn how to collaborate on projects remotely by utilising all sorts of communication and productivity tools such as <em>Slack, Google Meet, Google Classroom, Google Docs</em> etc.",
            "We also heavily relied on GitHub's pull requests feature so that we could work on our tasks individually, then reviewed them as group and merged them when completed and tested."
          ]
        }
      ],
      "highlights": [
        {
          "title": "GitHub",
          "content": [
            "Git is essentially a <strong>Time Machine + Multiverse</strong> with which you can go back and forth on a project and creating <em>multiple braching reality</em>. And GitHub expands that capability with Cloud Computing.",
            "Using GitHub was a great learning experience. This school project gave me a bit of taste of how powerful this technology is in terms of allowing developers to collaborate remotely on projects. I now understand how much bigger projects such as <em>Linux kernel</em> with thousands of participants around the world were made possible."
          ]
        },
        {
          "title": "Pull Requests",
          "content": [
            "This was a brand new concept to me at the time, and a bit intimidating at first - we did mess up the main branch and polluted it a couple of times, and had to learn how to fix it. But it turned out to be an incredible feature once you get it.",
            "This feature enables and forces you to think of development in <em>modular</em> way - each teammate is in charge of a feature that is a complete module which can be connected to another one like <em>LEGO</em>. Therefore, as long as everyone follows predefined input/output requirements for their module, all merged modules (result of pull requests) should come together nicely and form a functioning system.",
            "But Pull Requests are not without faults. As our team lacked a project manager who oversaw the overall structure, sometimes we got into a situation where one's impending task depended on the another's unmerged branch, thus creating a <strong>bottleneck effect</strong> for team overall productivity."
          ]
        },
        {
          "title": "Regex",
          "content": [
            "I was responsible for developing the search feature, so I had to learn how to use Regex in order to match user's search input to product's title and description. I learned that Regex is a very powerful technology, although rather complex to use at first, and making mistakes is all too easy.",
            "Although I only dabbled in Regex a bit, but I could tell it's an extremely <strong>concise and precise way</strong> of describing letter/symbol patterns, and is something that could play an important role in <em>data validation</em>."
          ]
        }
      ],
      "link": "https://no7boardgameshop.netlify.app/",
      "source": "https://github.com/WWSDI/stripeapi-group7-boardgame-onlineshop"
    }
  ]
}
