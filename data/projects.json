{
  "personalProjects": [
    {
      "name": "Portfolio Website",
      "img": "https://mir-s3-cdn-cf.behance.net/project_modules/disp/945b0225337909.563440870421b.png",
      "tools": [
        "next",
        "chakra-ui",
        "framer-motion",
        "node",
        "vercel",
        "github"
      ],
      "focus": "Frontend Development",
      "description": "My personal portfolio website (i.e. this site) that lists previous projects I have done and demostrates my coding skills.",
      "link": "https://sudoku-shawnsu.netlify.app/",
      "source": "https://sudoku-shawnsu.netlify.app/",
      "details": [
        { "title": "Overview", "content": ["", ""] },
        { "title": "Animation & Transition", "content": [""] },
        { "title": "Overview", "content": [""] }
      ],
      "highlights": [
        {
          "title": "Serverless Function",
          "content": [
            "One of the benefits of using Next.js is the abiltiy to use Serverless Function to perform serverside tasks without having to build & manage a server yourself, which saves a lot of time."
          ]
        },
        { "title": "Serverless Function", "content": [] },
        {
          "title": "Orchestration",
          "content": [
            "Previous projects all focused more on learning certain technologies and overcoming certain technical barriers. This is the first project that I truly learned orchestration - how to <strong>get all the moving parts work seamlessly together</strong>, and how to adjust and change them in a much more <em>declarative and abstract</em> way.",
            "With bigger projects, you have to think on a higher level, and using more ready-made tools to help you achieve that <strong>'Big Picture'</strong> view, otherwise you get bogged down by too many technical details. Coincidentally, this is also the core thinking of <em>Functional Programming</em> over <em>Imperative Programming</em>.",
            "One example is adopting <em>Next.js framework</em>. Previously I applied what I learned from school - manually building and configuring the techstack. I would install React, Express and other packages one by one, then manually write docker compose configuration file. It is a flexible and highly customisable process but tedious. Using Next.js saves lots of overhead in time as the framework makes many choices for you so you have more brain processing power for the Big Picture."
          ]
        },
        {
          "title": "Themeable UI Framework",
          "content": [
            "One example is the adoption of Chakra for UI. Previously I mainly relied on plain CSS to do UI work as I wanted to challenge myself to learn more about low-level CSS.",
            "Admittedly, it quickly became tediously, time-consuming and error-prone once the project grew bigger than a simple webpage with a few components. ",
            "Using a UI Framework is like switching from <em>building a house on your own with handtools</em> to overseeing a group of builders with powertools. Being freed from having to wrangle unruly low-level CSS properties allows you the freedom to <strong>compose code</strong>."
          ]
        },
        {
          "title": "Animation & Transition",
          "content": [
            "Learning how to do page transition/animation using Framer was pretty fun for me. Having previously learned how to do some basic animations with vanilla CSS, I know well how difficult and cumbersome it can be when animation becomes too complex. Using a framework like Framer give you higher level control.",
            "I used Framer for all the FadeIn effects, but I also used plain CSS for page title rubberbanding animation. Plain CSS gives you granualar control."
          ]
        },
        {
          "title": "Composition",
          "content": [
            "Building a project like this really helped deepening the concept of composition and how to create and reuse components. Initially I write a lot of code in one component to the point it becomes hundreds of line and too unwieldy, the structure of the code becomes blurry, you have to go through layers of tags to see what's inside. It becomes clear that the best way to handle this kind of situation is to create lower level components for storing repeating logic/code, then use higher level components to compose the app. "
          ]
        }
      ]
    },
    {
      "name": "Game of Life",
      "img": "https://play-lh.googleusercontent.com/Ia1Pt7lUxyCpjMYBhurg3hl-s7dx8Mf-uv-vbwRHPjXmnhYTIvtMyDzMfgOZLIE4f1w",
      "tools": ["mongodb", "express", "react", "node"],
      "focus": "Frontend Development",
      "description": "My implementation of the classic Sudoku (logic-based, combinatorial number puzzle) game.",
      "link": "https://game-of-life-by-shawn-su.netlify.app/",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li>                                            <li><strong>Backend</strong>: NA                            <li><strong>Main features</strong>: speed & seed sliders, colour themes, play/pause/step game, draw custom shapes, play demos, change screen size.</li>"
          ]
        },
        {
          "title": "Development Path",
          "content": [
            "This project started as a simple implementation of John Conway's Game of Life invented in 1970. It was relatively simple to implement the basic features in React, such as randomly seed the board and run the game.",
            "Then I got more ambitious and wanted to add more features into the game such as using the board as a drawing pad so users can experiment with various custom shapes. Then with the drawing feature at hand, I got inspired to create a demo feature which allows users to play ready-made shapes in realtime.",
            "The good thing about doing this project is that I challenged myself to build features I wasn't taught how to do, so I had to resort to creative thinking and research to help with implementation solution. The downside is lots of time wasted due to lack of structured planning."
          ]
        }
      ],

      "highlights": [
        { "title": "useEffect", "content": [""] },
        {
          "title": "useReducer",
          "content": [
            "Learning how to do page transition/animation was pretty fun for me"
          ]
        },
        {
          "title": "Development VS Production Build",
          "content": [
            "A strange problem I came across during development was performance issue - the game runs very slowly locally compared to other people's implementions I've seen online.",
            "I thought I had done something wrong, it could be incorrect use of React useEffect hooks resulted in redundant rendering. So I fiddled with it a lot to no avail. Eventually I gave up and deployed the 'slow' version, and to my surprise, it ran blazing fast. It dawned on me then it was because I had always ran development build locally which must have had some performance loss due to non-optimised code.",
            "I gained two new insights from this mistake - one is there's differences between development and production build; the other is it pays to adopt Agile Development. Errors (or non-errors in this case) can be quickly discovered through continuous development & deployment and quickly addressed in the next iteration."
          ]
        }
      ]
    },
    {
      "name": "Sudoku",
      "img": "https://cdn-icons-png.flaticon.com/512/5731/5731711.png",
      "tools": ["mongodb", "express", "react", "node"],
      "focus": "Fullstack Development",
      "details": [{ "title": "Overview", "content": [] }],
      "highlights": [
        {
          "title": "Typescript",
          "content": [
            "JS is a dynamically typed language which makes it easy to learn, but its limitation starts to show when projects get bigger. A common mistake I make during development is <strong>making wrong assumptions of the shape of some data</strong> and thus end up using the wrong functions to handle it.",
            "Typescript brings order and certainty into the world of JS. The language forces you to be mindful of the shape of inputs and outputs, this is particularly helpful when you have to program both frontend and backend where data structure may differ.",
            "I used Typescript throughout the whole Sudoku project in defining all kinds of data shapes like the puzzles, puzzle sets etc. Admittedly, my utilisation was minimal, but I already saw the benefits of much less runtime error.",
            "But using Typescript has its challenges. Your code gets longer and more difficult to read. React Elements have their own types which if you get wrong, you get many annoying red squiggly lines indicating errors."
          ]
        }
      ],
      "description": "My implementation of the classic Sudoku (logic-based, combinatorial number puzzle) game.",
      "link": "https://sudoku-shawnsu.netlify.app/"
    }
  ],
  "schoolProjects": [
    {
      "name": "Reservationizr",
      "img": "https://uxwing.com/wp-content/themes/uxwing/download/time-and-date/reservation-icon.png",
      "tools": [
        "mongodb",
        "express",
        "react",
        "node",
        "docker",
        "github",
        "netlify",
        "heroku",
        "insomnia",
        "notion",
        "miro"
      ],
      "focus": "Backend Development",
      "description": "This is the final school project in the Backend development term. This project aims to build & deploy a simple backend for a ready-made restaurant reservation booking app, and stich up the frontend and backend. Users are able to view restaurant info, sign up/log in, make new or view exsiting reservations.",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<ul><li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li>                          <li><strong>Backend</strong>: API server is hosted on Render.com (originally on Heroku.com); database is hosted on MongoDB Atlas; Auth0 is used for user authentication.</li></ul>"
          ]
        },
        { "title": "User Authentication", "content": [""] },
        {
          "title": "Docker",
          "content": [
            "Docker is mainly used for local development. Specifically, a mongodb database is created using Docker image, saving the trouble of installing mongodb locally."
          ]
        }
      ],
      "highlights": [
        { "title": "Middleware", "content": [""] },
        {
          "title": "REST API",
          "content": [
            "Learning how to do page transition/animation was pretty fun for me"
          ]
        },
        {
          "title": "Docker",
          "content": [""]
        },
        {
          "title": "Unit Testing",
          "content": [""]
        },
        {
          "title": "Docker Compose",
          "content": [""]
        }
      ],
      "link": "https://reservationizr-app-wwsdi.vercel.app/",
      "source": "https://github.com/WWSDI/02-project---reservationizr-app-part-2---manage-reservations-WWSDI"
    },
    {
      "name": "No.7 Board Game Shop",
      "img": "https://cdn.iconscout.com/icon/premium/png-256-thumb/game-shop-3765597-3140495.png",
      "tools": [
        "react",
        "node",
        "github",
        "stripe",
        "netlify",
        "vscode",
        "slack",
        "google-meet"
      ],

      "focus": "Frontend Development",
      "description": "This is the final school project in the Frontend Development term. This group project aims to build & deploy a simple e-commerce site (only Frontend) for Board Games with online payment function. Users are able to view store items, filter/sort/search for certain items, purchase items and make payments online.",
      "details": [
        {
          "title": "Overview",
          "content": [
            "<ul><li><strong>Frontend</strong>: developed on React, deployed to Netlify.</li> <li><strong>Backend</strong>: API server is hosted on Begin.com; online payment and store items data are hosted on Stripe.com.</li> <li><strong>Main features</strong>: display items; filter, sort, or search items; purchase items and make online payments.</li></ul>"
          ]
        },
        {
          "title": "Managing Project with GitHub",
          "content": [
            "GitHub has great Project management feature. We were able to utilise it and divide the project into 16 small tasks and divvied them all up among the three of us. We also used GitHub's Kanban-style UI to track progress. Pull Requests features is used to help teammates review each other's work and merge individual module/work into the main branch."
          ]
        },
        {
          "title": "Collaborating Remotely",
          "content": [
            "Most of the students attended the course online, so we had to learn how to collaborate on projects remotely by utilising all sorts of communication and productivity tools such as <em>Slack, Google Meet, Google Classroom, Google Docs</em> etc.",
            "We also heavily relied on GitHub's pull requests feature so that we could work on our tasks individually, then reviewed them as group and merged them when completed and tested."
          ]
        }
      ],
      "highlights": [
        { "title": "React", "content": [] },
        {
          "title": "GitHub",
          "content": [
            "Git is essentially a <strong>Time Machine + Multiverse</strong> with which you can go back and forth on a project and creating <em>multiple braching reality</em>. And GitHub expands that capability with Cloud Computing.",
            "Using GitHub was a great learning experience. This school project gave me a bit of taste of how powerful this technology is in terms of allowing developers to collaborate remotely on projects. I now understand how much bigger projects such as <em>Linux kernel</em> with thousands of participants around the world were made possible."
          ]
        },
        {
          "title": "Pull Requests",
          "content": [
            "This was a brand new concept to me at the time, and a bit intimidating at first - we did mess up the main branch and polluted it a couple of times, and had to learn how to fix it. But it turned out to be an incredible feature once you get it.",
            "This feature enables and forces you to think of development in <em>modular</em> way - each teammate is in charge of a feature that is a complete module which can be connected to another one like <em>LEGO</em>. Therefore, as long as everyone follows predefined input/output requirements for their module, all merged modules (result of pull requests) should come together nicely and form a functioning system.",
            "But Pull Requests are not without faults. As our team lacked a project manager who oversaw the overall structure, sometimes we got into a situation where one's impending task depended on the another's unmerged branch, thus creating a <strong>bottleneck effect</strong> for team overall productivity."
          ]
        },
        {
          "title": "Regex",
          "content": [
            "I was responsible for developing the search feature, so I had to learn how to use Regex in order to match user's search input to product's title and description. I learned that Regex is a very powerful technology, although rather complex to use at first, and making mistakes is all too easy.",
            "Although I only dabbled in Regex a bit, but I could tell it's an extremely <strong>concise and precise way</strong> of describing letter/symbol patterns, and is something that could play an important role in <em>data validation</em>."
          ]
        }
      ],
      "link": "https://no7boardgameshop.netlify.app/",
      "source": "https://github.com/WWSDI/stripeapi-group7-boardgame-onlineshop"
    }
  ]
}
